#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JoanCEdwards.DAO
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="EdwardsFoundation")]
	public partial class ExamSystemDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertChoice(Choice instance);
    partial void UpdateChoice(Choice instance);
    partial void DeleteChoice(Choice instance);
    partial void InsertUserProfile(UserProfile instance);
    partial void UpdateUserProfile(UserProfile instance);
    partial void DeleteUserProfile(UserProfile instance);
    partial void InsertExamQuestion(ExamQuestion instance);
    partial void UpdateExamQuestion(ExamQuestion instance);
    partial void DeleteExamQuestion(ExamQuestion instance);
    partial void InsertExamResult(ExamResult instance);
    partial void UpdateExamResult(ExamResult instance);
    partial void DeleteExamResult(ExamResult instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    partial void InsertQuestionChoice(QuestionChoice instance);
    partial void UpdateQuestionChoice(QuestionChoice instance);
    partial void DeleteQuestionChoice(QuestionChoice instance);
    partial void InsertExam(Exam instance);
    partial void UpdateExam(Exam instance);
    partial void DeleteExam(Exam instance);
    partial void InsertQuestionAnswer(QuestionAnswer instance);
    partial void UpdateQuestionAnswer(QuestionAnswer instance);
    partial void DeleteQuestionAnswer(QuestionAnswer instance);
    #endregion
		
		public ExamSystemDataContext() : 
				base(global::JoanCEdwards.DAO.Properties.Settings.Default.EdwardsFoundationConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public ExamSystemDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ExamSystemDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ExamSystemDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ExamSystemDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Choice> Choices
		{
			get
			{
				return this.GetTable<Choice>();
			}
		}
		
		public System.Data.Linq.Table<UserProfile> UserProfiles
		{
			get
			{
				return this.GetTable<UserProfile>();
			}
		}
		
		public System.Data.Linq.Table<ExamQuestion> ExamQuestions
		{
			get
			{
				return this.GetTable<ExamQuestion>();
			}
		}
		
		public System.Data.Linq.Table<ExamResult> ExamResults
		{
			get
			{
				return this.GetTable<ExamResult>();
			}
		}
		
		public System.Data.Linq.Table<Question> Questions
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
		
		public System.Data.Linq.Table<QuestionChoice> QuestionChoices
		{
			get
			{
				return this.GetTable<QuestionChoice>();
			}
		}
		
		public System.Data.Linq.Table<Exam> Exams
		{
			get
			{
				return this.GetTable<Exam>();
			}
		}
		
		public System.Data.Linq.Table<QuestionAnswer> QuestionAnswers
		{
			get
			{
				return this.GetTable<QuestionAnswer>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteExam")]
		public int DeleteExam([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ExamId", DbType="Int")] System.Nullable<int> examId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), examId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteUser")]
		public int DeleteUser([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Choice")]
	public partial class Choice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ChoiceId;
		
		private string _Label;
		
		private int _Value;
		
		private EntitySet<QuestionChoice> _QuestionChoices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChoiceIdChanging(int value);
    partial void OnChoiceIdChanged();
    partial void OnLabelChanging(string value);
    partial void OnLabelChanged();
    partial void OnValueChanging(int value);
    partial void OnValueChanged();
    #endregion
		
		public Choice()
		{
			this._QuestionChoices = new EntitySet<QuestionChoice>(new Action<QuestionChoice>(this.attach_QuestionChoices), new Action<QuestionChoice>(this.detach_QuestionChoices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChoiceId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ChoiceId
		{
			get
			{
				return this._ChoiceId;
			}
			set
			{
				if ((this._ChoiceId != value))
				{
					this.OnChoiceIdChanging(value);
					this.SendPropertyChanging();
					this._ChoiceId = value;
					this.SendPropertyChanged("ChoiceId");
					this.OnChoiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Label", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Label
		{
			get
			{
				return this._Label;
			}
			set
			{
				if ((this._Label != value))
				{
					this.OnLabelChanging(value);
					this.SendPropertyChanging();
					this._Label = value;
					this.SendPropertyChanged("Label");
					this.OnLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Choice_QuestionChoice", Storage="_QuestionChoices", ThisKey="ChoiceId", OtherKey="ChoiceId")]
		public EntitySet<QuestionChoice> QuestionChoices
		{
			get
			{
				return this._QuestionChoices;
			}
			set
			{
				this._QuestionChoices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_QuestionChoices(QuestionChoice entity)
		{
			this.SendPropertyChanging();
			entity.Choice = this;
		}
		
		private void detach_QuestionChoices(QuestionChoice entity)
		{
			this.SendPropertyChanging();
			entity.Choice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProfile")]
	public partial class UserProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _EmailAddress;
		
		private char _UserType;
		
		private string _GradeLevel;
		
		private bool _Status;
		
		private string _Password;
		
		private EntitySet<ExamResult> _ExamResults;
		
		private EntitySet<QuestionAnswer> _QuestionAnswers;
		
		private EntitySet<QuestionAnswer> _QuestionAnswers1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnUserTypeChanging(char value);
    partial void OnUserTypeChanged();
    partial void OnGradeLevelChanging(string value);
    partial void OnGradeLevelChanged();
    partial void OnStatusChanging(bool value);
    partial void OnStatusChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public UserProfile()
		{
			this._ExamResults = new EntitySet<ExamResult>(new Action<ExamResult>(this.attach_ExamResults), new Action<ExamResult>(this.detach_ExamResults));
			this._QuestionAnswers = new EntitySet<QuestionAnswer>(new Action<QuestionAnswer>(this.attach_QuestionAnswers), new Action<QuestionAnswer>(this.detach_QuestionAnswers));
			this._QuestionAnswers1 = new EntitySet<QuestionAnswer>(new Action<QuestionAnswer>(this.attach_QuestionAnswers1), new Action<QuestionAnswer>(this.detach_QuestionAnswers1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserType", DbType="Char(1) NOT NULL")]
		public char UserType
		{
			get
			{
				return this._UserType;
			}
			set
			{
				if ((this._UserType != value))
				{
					this.OnUserTypeChanging(value);
					this.SendPropertyChanging();
					this._UserType = value;
					this.SendPropertyChanged("UserType");
					this.OnUserTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeLevel", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string GradeLevel
		{
			get
			{
				return this._GradeLevel;
			}
			set
			{
				if ((this._GradeLevel != value))
				{
					this.OnGradeLevelChanging(value);
					this.SendPropertyChanging();
					this._GradeLevel = value;
					this.SendPropertyChanged("GradeLevel");
					this.OnGradeLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit NOT NULL")]
		public bool Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(300)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_ExamResult", Storage="_ExamResults", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<ExamResult> ExamResults
		{
			get
			{
				return this._ExamResults;
			}
			set
			{
				this._ExamResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_QuestionAnswer", Storage="_QuestionAnswers", ThisKey="UserId", OtherKey="ScorerId")]
		public EntitySet<QuestionAnswer> QuestionAnswers
		{
			get
			{
				return this._QuestionAnswers;
			}
			set
			{
				this._QuestionAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_QuestionAnswer1", Storage="_QuestionAnswers1", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<QuestionAnswer> QuestionAnswers1
		{
			get
			{
				return this._QuestionAnswers1;
			}
			set
			{
				this._QuestionAnswers1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExamResults(ExamResult entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_ExamResults(ExamResult entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_QuestionAnswers(QuestionAnswer entity)
		{
			this.SendPropertyChanging();
			entity.ScorerProfile = this;
		}
		
		private void detach_QuestionAnswers(QuestionAnswer entity)
		{
			this.SendPropertyChanging();
			entity.ScorerProfile = null;
		}
		
		private void attach_QuestionAnswers1(QuestionAnswer entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_QuestionAnswers1(QuestionAnswer entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExamQuestions")]
	public partial class ExamQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExamId;
		
		private int _QuestionId;
		
		private int _SortOrder;
		
		private EntityRef<Question> _Question;
		
		private EntityRef<Exam> _Exam;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExamIdChanging(int value);
    partial void OnExamIdChanged();
    partial void OnQuestionIdChanging(int value);
    partial void OnQuestionIdChanged();
    partial void OnSortOrderChanging(int value);
    partial void OnSortOrderChanged();
    #endregion
		
		public ExamQuestion()
		{
			this._Question = default(EntityRef<Question>);
			this._Exam = default(EntityRef<Exam>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ExamId
		{
			get
			{
				return this._ExamId;
			}
			set
			{
				if ((this._ExamId != value))
				{
					if (this._Exam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExamIdChanging(value);
					this.SendPropertyChanging();
					this._ExamId = value;
					this.SendPropertyChanged("ExamId");
					this.OnExamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortOrder", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_ExamQuestion", Storage="_Question", ThisKey="QuestionId", OtherKey="QuestionId", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.ExamQuestions.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.ExamQuestions.Add(this);
						this._QuestionId = value.QuestionId;
					}
					else
					{
						this._QuestionId = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_ExamQuestion", Storage="_Exam", ThisKey="ExamId", OtherKey="ExamId", IsForeignKey=true)]
		public Exam Exam
		{
			get
			{
				return this._Exam.Entity;
			}
			set
			{
				Exam previousValue = this._Exam.Entity;
				if (((previousValue != value) 
							|| (this._Exam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Exam.Entity = null;
						previousValue.ExamQuestions.Remove(this);
					}
					this._Exam.Entity = value;
					if ((value != null))
					{
						value.ExamQuestions.Add(this);
						this._ExamId = value.ExamId;
					}
					else
					{
						this._ExamId = default(int);
					}
					this.SendPropertyChanged("Exam");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExamResult")]
	public partial class ExamResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _ExamId;
		
		private string _Status;
		
		private System.Nullable<int> _UserScore;
		
		private System.Nullable<int> _MaxScore;
		
		private EntityRef<UserProfile> _UserProfile;
		
		private EntityRef<Exam> _Exam;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnExamIdChanging(int value);
    partial void OnExamIdChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnUserScoreChanging(System.Nullable<int> value);
    partial void OnUserScoreChanged();
    partial void OnMaxScoreChanging(System.Nullable<int> value);
    partial void OnMaxScoreChanged();
    #endregion
		
		public ExamResult()
		{
			this._UserProfile = default(EntityRef<UserProfile>);
			this._Exam = default(EntityRef<Exam>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ExamId
		{
			get
			{
				return this._ExamId;
			}
			set
			{
				if ((this._ExamId != value))
				{
					if (this._Exam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExamIdChanging(value);
					this.SendPropertyChanging();
					this._ExamId = value;
					this.SendPropertyChanged("ExamId");
					this.OnExamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserScore", DbType="Int")]
		public System.Nullable<int> UserScore
		{
			get
			{
				return this._UserScore;
			}
			set
			{
				if ((this._UserScore != value))
				{
					this.OnUserScoreChanging(value);
					this.SendPropertyChanging();
					this._UserScore = value;
					this.SendPropertyChanged("UserScore");
					this.OnUserScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxScore", DbType="Int")]
		public System.Nullable<int> MaxScore
		{
			get
			{
				return this._MaxScore;
			}
			set
			{
				if ((this._MaxScore != value))
				{
					this.OnMaxScoreChanging(value);
					this.SendPropertyChanging();
					this._MaxScore = value;
					this.SendPropertyChanged("MaxScore");
					this.OnMaxScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_ExamResult", Storage="_UserProfile", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.ExamResults.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.ExamResults.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_ExamResult", Storage="_Exam", ThisKey="ExamId", OtherKey="ExamId", IsForeignKey=true)]
		public Exam Exam
		{
			get
			{
				return this._Exam.Entity;
			}
			set
			{
				Exam previousValue = this._Exam.Entity;
				if (((previousValue != value) 
							|| (this._Exam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Exam.Entity = null;
						previousValue.ExamResults.Remove(this);
					}
					this._Exam.Entity = value;
					if ((value != null))
					{
						value.ExamResults.Add(this);
						this._ExamId = value.ExamId;
					}
					else
					{
						this._ExamId = default(int);
					}
					this.SendPropertyChanged("Exam");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Question")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuestionId;
		
		private string _QuestionCategory;
		
		private string _QuestionType;
		
		private string _QuestionText;
		
		private EntitySet<ExamQuestion> _ExamQuestions;
		
		private EntitySet<QuestionChoice> _QuestionChoices;
		
		private EntitySet<QuestionAnswer> _QuestionAnswers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestionIdChanging(int value);
    partial void OnQuestionIdChanged();
    partial void OnQuestionCategoryChanging(string value);
    partial void OnQuestionCategoryChanged();
    partial void OnQuestionTypeChanging(string value);
    partial void OnQuestionTypeChanged();
    partial void OnQuestionTextChanging(string value);
    partial void OnQuestionTextChanged();
    #endregion
		
		public Question()
		{
			this._ExamQuestions = new EntitySet<ExamQuestion>(new Action<ExamQuestion>(this.attach_ExamQuestions), new Action<ExamQuestion>(this.detach_ExamQuestions));
			this._QuestionChoices = new EntitySet<QuestionChoice>(new Action<QuestionChoice>(this.attach_QuestionChoices), new Action<QuestionChoice>(this.detach_QuestionChoices));
			this._QuestionAnswers = new EntitySet<QuestionAnswer>(new Action<QuestionAnswer>(this.attach_QuestionAnswers), new Action<QuestionAnswer>(this.detach_QuestionAnswers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionCategory", DbType="VarChar(50)")]
		public string QuestionCategory
		{
			get
			{
				return this._QuestionCategory;
			}
			set
			{
				if ((this._QuestionCategory != value))
				{
					this.OnQuestionCategoryChanging(value);
					this.SendPropertyChanging();
					this._QuestionCategory = value;
					this.SendPropertyChanged("QuestionCategory");
					this.OnQuestionCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionType", DbType="NChar(10)")]
		public string QuestionType
		{
			get
			{
				return this._QuestionType;
			}
			set
			{
				if ((this._QuestionType != value))
				{
					this.OnQuestionTypeChanging(value);
					this.SendPropertyChanging();
					this._QuestionType = value;
					this.SendPropertyChanged("QuestionType");
					this.OnQuestionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionText", DbType="NVarChar(MAX)")]
		public string QuestionText
		{
			get
			{
				return this._QuestionText;
			}
			set
			{
				if ((this._QuestionText != value))
				{
					this.OnQuestionTextChanging(value);
					this.SendPropertyChanging();
					this._QuestionText = value;
					this.SendPropertyChanged("QuestionText");
					this.OnQuestionTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_ExamQuestion", Storage="_ExamQuestions", ThisKey="QuestionId", OtherKey="QuestionId")]
		public EntitySet<ExamQuestion> ExamQuestions
		{
			get
			{
				return this._ExamQuestions;
			}
			set
			{
				this._ExamQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_QuestionChoice", Storage="_QuestionChoices", ThisKey="QuestionId", OtherKey="QuestionId")]
		public EntitySet<QuestionChoice> QuestionChoices
		{
			get
			{
				return this._QuestionChoices;
			}
			set
			{
				this._QuestionChoices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_QuestionAnswer", Storage="_QuestionAnswers", ThisKey="QuestionId", OtherKey="QuestionId")]
		public EntitySet<QuestionAnswer> QuestionAnswers
		{
			get
			{
				return this._QuestionAnswers;
			}
			set
			{
				this._QuestionAnswers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExamQuestions(ExamQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_ExamQuestions(ExamQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
		
		private void attach_QuestionChoices(QuestionChoice entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_QuestionChoices(QuestionChoice entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
		
		private void attach_QuestionAnswers(QuestionAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_QuestionAnswers(QuestionAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuestionChoice")]
	public partial class QuestionChoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuestionId;
		
		private int _ChoiceId;
		
		private int _SortOrder;
		
		private EntityRef<Choice> _Choice;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestionIdChanging(int value);
    partial void OnQuestionIdChanged();
    partial void OnChoiceIdChanging(int value);
    partial void OnChoiceIdChanged();
    partial void OnSortOrderChanging(int value);
    partial void OnSortOrderChanged();
    #endregion
		
		public QuestionChoice()
		{
			this._Choice = default(EntityRef<Choice>);
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChoiceId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ChoiceId
		{
			get
			{
				return this._ChoiceId;
			}
			set
			{
				if ((this._ChoiceId != value))
				{
					if (this._Choice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChoiceIdChanging(value);
					this.SendPropertyChanging();
					this._ChoiceId = value;
					this.SendPropertyChanged("ChoiceId");
					this.OnChoiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortOrder", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Choice_QuestionChoice", Storage="_Choice", ThisKey="ChoiceId", OtherKey="ChoiceId", IsForeignKey=true)]
		public Choice Choice
		{
			get
			{
				return this._Choice.Entity;
			}
			set
			{
				Choice previousValue = this._Choice.Entity;
				if (((previousValue != value) 
							|| (this._Choice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Choice.Entity = null;
						previousValue.QuestionChoices.Remove(this);
					}
					this._Choice.Entity = value;
					if ((value != null))
					{
						value.QuestionChoices.Add(this);
						this._ChoiceId = value.ChoiceId;
					}
					else
					{
						this._ChoiceId = default(int);
					}
					this.SendPropertyChanged("Choice");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_QuestionChoice", Storage="_Question", ThisKey="QuestionId", OtherKey="QuestionId", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.QuestionChoices.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.QuestionChoices.Add(this);
						this._QuestionId = value.QuestionId;
					}
					else
					{
						this._QuestionId = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Exam")]
	public partial class Exam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExamId;
		
		private string _Title;
		
		private string _Instructions;
		
		private bool _Status;
		
		private System.Nullable<int> _Value;
		
		private EntitySet<ExamQuestion> _ExamQuestions;
		
		private EntitySet<ExamResult> _ExamResults;
		
		private EntitySet<QuestionAnswer> _QuestionAnswers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExamIdChanging(int value);
    partial void OnExamIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnInstructionsChanging(string value);
    partial void OnInstructionsChanged();
    partial void OnStatusChanging(bool value);
    partial void OnStatusChanged();
    partial void OnValueChanging(System.Nullable<int> value);
    partial void OnValueChanged();
    #endregion
		
		public Exam()
		{
			this._ExamQuestions = new EntitySet<ExamQuestion>(new Action<ExamQuestion>(this.attach_ExamQuestions), new Action<ExamQuestion>(this.detach_ExamQuestions));
			this._ExamResults = new EntitySet<ExamResult>(new Action<ExamResult>(this.attach_ExamResults), new Action<ExamResult>(this.detach_ExamResults));
			this._QuestionAnswers = new EntitySet<QuestionAnswer>(new Action<QuestionAnswer>(this.attach_QuestionAnswers), new Action<QuestionAnswer>(this.detach_QuestionAnswers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ExamId
		{
			get
			{
				return this._ExamId;
			}
			set
			{
				if ((this._ExamId != value))
				{
					this.OnExamIdChanging(value);
					this.SendPropertyChanging();
					this._ExamId = value;
					this.SendPropertyChanged("ExamId");
					this.OnExamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Instructions", DbType="NVarChar(MAX)")]
		public string Instructions
		{
			get
			{
				return this._Instructions;
			}
			set
			{
				if ((this._Instructions != value))
				{
					this.OnInstructionsChanging(value);
					this.SendPropertyChanging();
					this._Instructions = value;
					this.SendPropertyChanged("Instructions");
					this.OnInstructionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit NOT NULL")]
		public bool Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int")]
		public System.Nullable<int> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_ExamQuestion", Storage="_ExamQuestions", ThisKey="ExamId", OtherKey="ExamId")]
		public EntitySet<ExamQuestion> ExamQuestions
		{
			get
			{
				return this._ExamQuestions;
			}
			set
			{
				this._ExamQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_ExamResult", Storage="_ExamResults", ThisKey="ExamId", OtherKey="ExamId")]
		public EntitySet<ExamResult> ExamResults
		{
			get
			{
				return this._ExamResults;
			}
			set
			{
				this._ExamResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_QuestionAnswer", Storage="_QuestionAnswers", ThisKey="ExamId", OtherKey="ExamId")]
		public EntitySet<QuestionAnswer> QuestionAnswers
		{
			get
			{
				return this._QuestionAnswers;
			}
			set
			{
				this._QuestionAnswers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExamQuestions(ExamQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Exam = this;
		}
		
		private void detach_ExamQuestions(ExamQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Exam = null;
		}
		
		private void attach_ExamResults(ExamResult entity)
		{
			this.SendPropertyChanging();
			entity.Exam = this;
		}
		
		private void detach_ExamResults(ExamResult entity)
		{
			this.SendPropertyChanging();
			entity.Exam = null;
		}
		
		private void attach_QuestionAnswers(QuestionAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Exam = this;
		}
		
		private void detach_QuestionAnswers(QuestionAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Exam = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuestionAnswer")]
	public partial class QuestionAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuestionAnswerId;
		
		private int _QuestionId;
		
		private int _UserId;
		
		private string _Answer;
		
		private int _ExamId;
		
		private System.Nullable<int> _Score;
		
		private System.Nullable<int> _ScorerId;
		
		private string _Comment;
		
		private EntityRef<Exam> _Exam;
		
		private EntityRef<Question> _Question;
		
		private EntityRef<UserProfile> _ScorerProfile;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestionAnswerIdChanging(int value);
    partial void OnQuestionAnswerIdChanged();
    partial void OnQuestionIdChanging(int value);
    partial void OnQuestionIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    partial void OnExamIdChanging(int value);
    partial void OnExamIdChanged();
    partial void OnScoreChanging(System.Nullable<int> value);
    partial void OnScoreChanged();
    partial void OnScorerIdChanging(System.Nullable<int> value);
    partial void OnScorerIdChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public QuestionAnswer()
		{
			this._Exam = default(EntityRef<Exam>);
			this._Question = default(EntityRef<Question>);
			this._ScorerProfile = default(EntityRef<UserProfile>);
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionAnswerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QuestionAnswerId
		{
			get
			{
				return this._QuestionAnswerId;
			}
			set
			{
				if ((this._QuestionAnswerId != value))
				{
					this.OnQuestionAnswerIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionAnswerId = value;
					this.SendPropertyChanged("QuestionAnswerId");
					this.OnQuestionAnswerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionId", DbType="Int NOT NULL")]
		public int QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamId", DbType="Int NOT NULL")]
		public int ExamId
		{
			get
			{
				return this._ExamId;
			}
			set
			{
				if ((this._ExamId != value))
				{
					if (this._Exam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExamIdChanging(value);
					this.SendPropertyChanging();
					this._ExamId = value;
					this.SendPropertyChanged("ExamId");
					this.OnExamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Int")]
		public System.Nullable<int> Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScorerId", DbType="Int")]
		public System.Nullable<int> ScorerId
		{
			get
			{
				return this._ScorerId;
			}
			set
			{
				if ((this._ScorerId != value))
				{
					if (this._ScorerProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScorerIdChanging(value);
					this.SendPropertyChanging();
					this._ScorerId = value;
					this.SendPropertyChanged("ScorerId");
					this.OnScorerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_QuestionAnswer", Storage="_Exam", ThisKey="ExamId", OtherKey="ExamId", IsForeignKey=true)]
		public Exam Exam
		{
			get
			{
				return this._Exam.Entity;
			}
			set
			{
				Exam previousValue = this._Exam.Entity;
				if (((previousValue != value) 
							|| (this._Exam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Exam.Entity = null;
						previousValue.QuestionAnswers.Remove(this);
					}
					this._Exam.Entity = value;
					if ((value != null))
					{
						value.QuestionAnswers.Add(this);
						this._ExamId = value.ExamId;
					}
					else
					{
						this._ExamId = default(int);
					}
					this.SendPropertyChanged("Exam");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_QuestionAnswer", Storage="_Question", ThisKey="QuestionId", OtherKey="QuestionId", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.QuestionAnswers.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.QuestionAnswers.Add(this);
						this._QuestionId = value.QuestionId;
					}
					else
					{
						this._QuestionId = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_QuestionAnswer", Storage="_ScorerProfile", ThisKey="ScorerId", OtherKey="UserId", IsForeignKey=true)]
		public UserProfile ScorerProfile
		{
			get
			{
				return this._ScorerProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._ScorerProfile.Entity;
				if (((previousValue != value) 
							|| (this._ScorerProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ScorerProfile.Entity = null;
						previousValue.QuestionAnswers.Remove(this);
					}
					this._ScorerProfile.Entity = value;
					if ((value != null))
					{
						value.QuestionAnswers.Add(this);
						this._ScorerId = value.UserId;
					}
					else
					{
						this._ScorerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ScorerProfile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_QuestionAnswer1", Storage="_UserProfile", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.QuestionAnswers1.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.QuestionAnswers1.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
